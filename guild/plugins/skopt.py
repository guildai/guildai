# Copyright 2017-2022 RStudio, PBC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import yaml

from guild import flag_util
from guild import model_proxy
from guild import plugin as pluginlib


###################################################################
# Random optimizer
###################################################################


class ProxyBase(model_proxy.BatchModelProxy):
    default_max_trials = 20
    delete_on_success = False
    can_stage_trials = False


class RandomOptimizerModelProxy(ProxyBase):

    name = "skopt"
    op_name = "random"
    op_description = "Batch processor supporting random flag value generation."
    module_name = "guild.plugins.random_main"
    flag_encoder = "guild.plugins.skopt:encode_flag_for_optimizer"
    delete_on_success = True
    can_stage_trials = True


###################################################################
# Bayesian with gaussian process optimizer
###################################################################


class GPOptimizerModelProxy(ProxyBase):

    name = "skopt"
    op_name = "gp"
    op_description = yaml.safe_load(
        """>

  Bayesian optimizer using Gaussian processes.

  Refer to https://scikit-optimize.github.io/#skopt.gp_minimize for
  details on this algorithm and its flags.
  """
    )

    module_name = "guild.plugins.skopt_gp_main"
    flag_encoder = "guild.plugins.skopt:encode_flag_for_optimizer"
    default_max_trials = 20

    flags_data = yaml.safe_load(
        """
random-starts:
  description: Number of trials using random values before optimizing
  default: 3
  type: int
acq-func:
  description: Function to minimize over the gaussian prior
  default: gp_hedge
  choices:
    - value: LCB
      description: Lower confidence bound
    - value: EI
      description: Negative expected improvement
    - value: PI
      description: Negative probability of improvement
    - value: gp_hedge
      description: Probabilistically use LCB, EI, or PI at every iteration
    - value: EIps
      description: Negative expected improvement per second
    - value: PIps
      description: Negative probability of improvement per second
kappa:
  description:
    Degree to which variance in the predicted values is taken into
    account
  default: 1.96
  type: float
xi:
  description: Improvement to seek over the previous best values
  default: 0.05
  type: float
noise:
  description:
    Level of noise associated with the objective

    Use 'gaussian' if the objective returns noisy observations,
    otherwise specify the expected variance of the noise.
  default: gaussian
prev-trials:
  description: Method used to select previous trials for suggestions
  default: batch
  choices:
    - value: batch
      description: Use trials generated by the batch run
    - value: sourcecode
      description: Use trials with the same source code
    - value: operation
      description: Use trials with the same operation name
"""
    )


###################################################################
# Forest optimizer
###################################################################


class ForestOptimizerModelProxy(ProxyBase):

    name = "skopt"
    op_name = "forest"
    op_description = yaml.safe_load(
        """>

  Sequential optimization using decision trees.
  Refer to https://scikit-optimize.github.io/#skopt.forest_minimize
  for details on this algorithm and its flags.
  """
    )

    module_name = "guild.plugins.skopt_forest_main"
    flag_encoder = "guild.plugins.skopt:encode_flag_for_optimizer"

    flags_data = yaml.safe_load(
        """
random-starts:
  description: Number of trials using random values before optimizing
  default: 3
  type: int
kappa:
  description:
    Degree to which variance in the predicted values is taken into account
  default: 1.96
  type: float
xi:
  description: Improvement to seek over the previous best values
  default: 0.05
  type: float
prev-trials:
  description: Method used to select previous trials for suggestions
  default: batch
  choices:
    - value: batch
      description: Use trials generated by the batch run
    - value: sourcecode
      description: Use trials with the same source code
    - value: operation
      description: Use trials with the same operation name
"""
    )


###################################################################
# Gradient boosted regression tree (GBRT) optimizer
###################################################################


class GBRTOptimizerModelProxy(ProxyBase):

    name = "skopt"
    op_name = "gbrt"
    op_description = yaml.safe_load(
        """>

  Sequential optimization using gradient boosted regression trees.

  Refer to https://scikit-optimize.github.io/#skopt.gbrt_minimize
  for details on this algorithm and its flags.
  """
    )

    module_name = "guild.plugins.skopt_gbrt_main"
    flag_encoder = "guild.plugins.skopt:encode_flag_for_optimizer"

    flags_data = yaml.safe_load(
        """
random-starts:
  description: Number of trials using random values before optimizing
  default: 3
  type: int
kappa:
  description:
    Degree to which variance in the predicted values is taken into account
  default: 1.96
  type: float
xi:
  description: Improvement to seek over the previous best values
  default: 0.05
  type: float
prev-trials:
  description: Method used to select previous trials for suggestions
  default: batch
  choices:
    - value: batch
      description: Use trials generated by the batch run
    - value: sourcecode
      description: Use trials with the same source code
    - value: operation
      description: Use trials with the same operation name
"""
    )


###################################################################
# Flag encoders
###################################################################


def encode_flag_for_optimizer(val, flagdef):
    """Encodes a flag def for the range of supported skopt search spaces."""
    if flagdef.choices:
        return [c.value for c in flagdef.choices]
    if flagdef.min is not None and flagdef.max is not None:
        return _encode_function(flagdef, val)
    return val


def _encode_function(flagdef, val):
    assert flagdef.min is not None and flagdef.max is not None
    func_name = flagdef.distribution or "uniform"
    low = flag_util.encode_flag_val(flagdef.min)
    high = flag_util.encode_flag_val(flagdef.max)
    args = [low, high]
    if val is not None:
        initial = flag_util.encode_flag_val(val)
        args.append(initial)
    return f"{func_name}[{':'.join(args)}]"


###################################################################
# Plugin
###################################################################


class SkoptPlugin(pluginlib.Plugin):
    def resolve_model_op(self, opspec):
        if opspec in ("random", "skopt:random"):
            model = RandomOptimizerModelProxy()
            return model, model.op_name
        if opspec in ("gp", "skopt:gp", "bayesian", "gaussian"):
            model = GPOptimizerModelProxy()
            return model, model.op_name
        if opspec in ("forest", "skopt:forest"):
            model = ForestOptimizerModelProxy()
            return model, model.op_name
        if opspec in ("gbrt", "skopt:gbrt"):
            model = GBRTOptimizerModelProxy()
            return model, model.op_name
        return None
